{"version":3,"sources":["utils.js"],"names":[],"mappings":"AAAA,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE7B,oBAAoB,GAAG,EAAE,IAAI;IACzB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;QACxC,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACpC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,GAAG,EAAE,KAAK;YACnC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;YACD,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACtB,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,GAAG;oBAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvB,CAAC;oBACD,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAAA,CAAC;AAEF,yBAAyB,GAAG;IACxB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;QACxC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,GAAG;YACxB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,SAAS,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;YACD,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,KAAK;gBAChC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,IAAI;oBAChC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBACL,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,GAAG;wBACvB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBACvB,CAAC;wBACD,OAAO,EAAE,CAAC;oBACd,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC,OAAK,CAAA,CAAC,MAAM,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAAA,CAAC;AAEF,IAAM,SAAS,GAAG,UAAU,OAAO;IACjC,IAAI,CAAC;QACH,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;IACvB,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC;YAAC,MAAM,GAAG,CAAA;IACtC,CAAC;AACH,CAAC,CAAA;AAED,MAAM,CAAC,OAAO,GAAG;IACb,KAAK,EAAE,eAAe;IACtB,MAAM,EAAE,UAAU;IAClB,KAAK,EAAE,SAAS;CACnB,CAAC","file":"../utils.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nfunction deleteFile(dir, file) {\n    return new Promise(function (resolve, reject) {\n        var filePath = path.join(dir, file);\n        fs.lstat(filePath, function (err, stats) {\n            if (err) {\n                return reject(err);\n            }\n            if (stats.isDirectory()) {\n                resolve(deleteDirectory(filePath));\n            } else {\n                fs.unlink(filePath, function (err) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    resolve();\n                });\n            }\n        });\n    });\n};\n\nfunction deleteDirectory(dir) {\n    return new Promise(function (resolve, reject) {\n        fs.access(dir, function (err) {\n            if (err) {\n                mkdirSync(dir);\n            }\n            fs.readdir(dir, function (err, files) {\n                if (err) {\n                    return reject(err);\n                }\n                Promise.all(files.map(function (file) {\n                    return deleteFile(dir, file);\n                })).then(function () {\n                    fs.rmdir(dir, function (err) {\n                        if (err) {\n                            return reject(err);\n                        }\n                        resolve();\n                    });\n                }).catch(reject);\n            });\n        });\n    });\n};\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath)\n  } catch (err) {\n    if (err.code !== 'EEXIST') throw err\n  }\n}\n\nmodule.exports = {\n    rmdir: deleteDirectory,\n    rmfile: deleteFile,\n    mkdir: mkdirSync\n};"]}